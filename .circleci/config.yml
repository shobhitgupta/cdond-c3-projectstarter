version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        default: "test"
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force

orbs:
  node:  circleci/node@4.1
  slack: circleci/slack@4.1

parameters:
  image-tag:
    type: string
    default: "13.9.0"
jobs:

########################### Create Infrastructure ####################################
  deploy-infrastructure:
    docker:
      - image : amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run: echo ${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
                aws cloudformation deploy \
                  --template-file .circleci/files/frontend.yml \
                  --tags project=udapeople-frontend \
                  --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                  --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output text)            
            echo "$BACKEND_IP" >> .circleci/ansible/inventory.txt              
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  build-frontend:
    docker:
      - image: cimg/node:<< pipeline.parameters.image-tag >>
    steps:
      - checkout
      - restore_cache:
          keys: [ frontend-build ]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [ frontend/node_modules ]
          key: frontend-build

  build-backend:
      docker:
        - image: cimg/node:<< pipeline.parameters.image-tag >>
      steps:
        - checkout
        - restore_cache:
            keys: [ backend-build ]
        - run:
            name: Back-end build
            command: |
              cd backend
              npm install
              npm run build
        - save_cache:
            paths: [ backend/node_modules ]
            key: backend-build

  test-frontend:
      docker:
        - image: cimg/node:<< pipeline.parameters.image-tag >>
      steps:
        - checkout
        - restore_cache:
            keys: [ frontend-build ]
        - run:
            name: Front-end unit tests
            command: |
              cd frontend
              npm install
              npm run test

  test-backend:
      docker:
        - image: cimg/node:<< pipeline.parameters.image-tag >>
      steps:
        - checkout
        - restore_cache:
            keys: [ backend-build ]
        - run:
            name: Back-end unit tests
            command: |
              cd backend
              npm install
              npm run test

  scan-frontend:
      docker:
        - image: cimg/node:<< pipeline.parameters.image-tag >>
      steps:
        - checkout
        - restore_cache:
            keys: [ frontend-build ]
        - run:
            name: Front-end vulnerability
            command: |
              cd frontend
              npm install
              npm audit fix --audit-level=critical --force
              npm audit --audit-level=critical

  scan-backend:
      docker:
        - image: cimg/node:<< pipeline.parameters.image-tag >>
      steps:
        - checkout
        - restore_cache:
            keys: [ backend-build ]
        - run:
            name: Back-end vulnerability
            command: |
              cd backend
              npm install
              npm audit fix --audit-level=critical --force
              npm audit fix --force
              npm audit --audit-level=critical
    
    

    ######################################################################################

  configure-infrastructure:
   docker:
     - image: python:3.7-alpine3.11
   steps:
    - checkout
    - add_ssh_keys:
       fingerprints: [ "47:08:da:cb:58:26:28:6b:01:dc:15:ad:e3:5a:cf:2a" ]
    - attach_workspace:
            at: ~/
    - run:
        name: Install dependencies
        command: |
          apk add --update ansible \=
    - attach_workspace:
        at: ~/
    - run:
        name: Configure server
        command: |
          cd .circleci/ansible
          cat inventory.txt
          ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml
    - destroy-environment:
        workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
####################################
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
            keys: [ backend-build ]
      - run:
          name: awscli install
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -y -qq install python3
            sudo apt-get -qq install awscli

      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            cat .env
            npm run migrations >> migrations_dump.txt
            cat migrations_dump.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  deploy-frontend:
       docker:
         - image: circleci/node:12.0.0
       steps:
         - checkout
         - run:
             name: Install dependencies
             command: |
               sudo apt update
               sudo apt install awscli -y
         - attach_workspace:
             at: ~/
         - run:
             name : retrieve backend url
             command : |
               export BACKEND_IP=$(aws ec2 describe-instances \
               --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
               --query "Reservations[*].Instances[*].PublicIpAddress" \
               --output text)
               export API_URL="http://${BACKEND_IP}:3030"
               echo "API_URL = ${API_URL}"
               echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
               cat frontend/.env
               cd frontend
               npm install
               npm run build
               tar -czvf artifact-${CIRCLE_WORKFLOW_ID:0:7}.tar.gz dist
               aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}
         - destroy-environment:
             workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-backend:
      docker:
          - image: python:3.7-alpine3.11
      steps:
           - checkout
           - run:
                 name: Install ansible
                 command: |
                   apk add --update ansible
           - add_ssh_keys:
               fingerprints: [ "47:08:da:cb:58:26:28:6b:01:dc:15:ad:e3:5a:cf:2a" ] # You can get this ID in the section where you registered the SSH Key
           - attach_workspace:
               at: ~/
           - run:
               name: Install npm
               command: |
                 apk add --update npm
           - run:
               name: deploy backend objects
               command: |
                 cd backend
                 npm i
                 npm run build
                 cd ..
                 # Zip the directory
                 tar -C backend -czvf artifact.tar.gz .
                 cd .circleci/ansible
                 echo "Contents  of the inventory.txt file is -------"
                 cat inventory.txt
                 ansible-playbook -i inventory.txt deploy-backend.yml
           - destroy-environment:
               workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
          - checkout
          - run:
              name: Install dependencies
              command: |
                apk add --update curl nodejs npm
                apk add --update nodejs
                apk add --update npm
                pip install awscli
          - run:
              name: Get backend url
              command: |
                BACKEND_IP=$(aws ec2 describe-instances \
                --query "Reservations[*].Instances[*].PublicIpAddress" \
                --output text)
                echo "http://${BACKEND_IP}:3030/api/status"
                curl "http://${BACKEND_IP}:3030/api/status"
                if curl "http://${BACKEND_IP}:3030/api/status" | grep "ok"
                then
                return 0
                else
                return 1
                fi
          - run:
              name: Frontend smoke test.
              command: |
                URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com"
                if curl -s ${URL} | grep "Welcome"
                then
                return 1
                else
                return 1
                fi
          - destroy-environment:
                workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

workflows:
  default:
    jobs:
          - build-frontend
          - build-backend
          - test-frontend:
             requires: [ build-frontend ]
          - test-backend:
              requires: [ build-backend ]
          - scan-backend:
                requires: [ build-backend ]
          - scan-frontend:
                requires: [ build-frontend ]
          - deploy-infrastructure:
                requires: [ test-frontend, test-backend, scan-frontend, scan-backend ]
          - configure-infrastructure:
                requires: [ deploy-infrastructure ]
          - run-migrations:
                requires: [ configure-infrastructure ]
          - deploy-frontend:
                requires: [ run-migrations ]
          - deploy-backend:
                requires: [ run-migrations ]
#          - smoke-test:
#                requires: [ deploy-backend, deploy-frontend ]
#          - cloudfront-update:
#                requires: [ smoke-test ]
#          - cleanup:
#                requires: [ cloudfront-update ]