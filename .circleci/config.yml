version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      stack:
        default: "test"
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name <<parameters.stack>>-${CIRCLE_WORKFLOW_ID:0:7}

orbs:
  node:  circleci/node@4.1
  slack: circleci/slack@4.1

parameters:
  image-tag:
    type: string
    default: "13.9.0"
jobs:
  build-frontend:
    docker:
      - image: cimg/node:<< pipeline.parameters.image-tag >>
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: cimg/node:<< pipeline.parameters.image-tag >>
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: cimg/node:<< pipeline.parameters.image-tag >>
    steps:
      - checkout
      - restore_cache:
            keys: [ frontend-build ]
      - run:
          name: Front-end unit tests
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: cimg/node:<< pipeline.parameters.image-tag >>
    steps:
      - checkout
      - restore_cache:
          keys: [ backend-build ]
      - run:
          name: Back-end unit tests
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: cimg/node:<< pipeline.parameters.image-tag >>
    steps:
      - checkout
      - restore_cache:
          keys: [ frontend-build ]
      - run:
          name: Front-end vulnerability
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: cimg/node:<< pipeline.parameters.image-tag >>
    steps:
      - checkout
      - restore_cache:
          keys: [ backend-build ]
      - run:
          name: Back-end vulnerability
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
  deploy:
    executor:
      name: node/default
    steps:
      - checkout
      - node/install-packages
      - run:
          command: npm run deploy
      - slack/notify:
          channel: circleci-channel
          event: fail
          template: basic_fail_1

########################### Create Infrastructure ####################################
  deploy-infrastructure:
    docker:
      - image : amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run: echo ${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople\
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" 
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople\
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" 
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output text)
            echo "[web]" >> .circleci/ansible/inventory.txt              
            echo "$BACKEND_IP" >> .circleci/ansible/inventory.txt              
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure

######################################################################################

configure-infrastructure:
  docker:
    - image: python:3.7-alpine3.11
  steps:
    - checkout
    - add_ssh_keys:
       fingerprints: [ "47:08:da:cb:58:26:28:6b:01:dc:15:ad:e3:5a:cf:2a" ]
    - attach_workspace:
            at: ~/
    # attach workspace
    - run:
        name: Install dependencies
        command: |
          apk add --update ansible \

    - run:
        name: Configure server
        command: |
          ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml
    # Here's where you will add some code to rollback on failure
####################################
workflows:
  default:
    jobs:
      - deploy-infrastructure
#      - build-frontend
#      - build-backend
#      - test-frontend:
#          requires:
#            - build-frontend
#      - test-backend:
#          requires:
#            - build-backend
#      - scan-frontend:
#          requires:
#            - build-frontend
#      - scan-backend:
#          requires:
#            - build-backend
#  deploy_and_notify:
#    jobs:
#      - deploy:
#          context: slack-secrets
